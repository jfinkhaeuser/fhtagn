/**
 * $Id$
 *
 * Copyright (C) 2007 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_MANDATORY_H
#define FHTAGN_MANDATORY_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

#include <stdexcept>

#include <boost/noncopyable.hpp>

namespace fhtagn {

/**
 * An implementation of Andrei Alexandrescu's http://www.ddj.com/dept/cpp/184401917
 *
 * The throw_if_unchecked class template can be used to wrap around return
 * types of functions that you want the caller to examine:
 *
 *    throw_if_unchecked<int> foo() {...}
 *
 *    foo();                                    // throws
 *    throw_if_unchecked<int> ret = foo();      // throws
 *    int ret = foo();                          // doesn't throw, value is 'used'
 *    static_cast<ignore_return_value>(foo());  // doesn't throw, discarded
 *    ignore_return_value x = foo();            // doesn't throw, discarded
 *
 * The error thrown in the cases marked above are std::logic_error.
 **/

struct ignore_return_value {};

template <
    // the wrapped type
    typename wrappedT
>
class throw_if_unchecked
{
public:
    inline throw_if_unchecked(wrappedT const & retval)
        : m_throw(true)
        , m_retval(retval)
    {
    }

    inline throw_if_unchecked(throw_if_unchecked const & other)
        : m_throw(other.m_throw)
        , m_retval(other.m_retval)
    {
    }

    inline ~throw_if_unchecked()
    {
        if (m_throw) {
            throw std::logic_error("Ignored return value that must not be ignored!");
        }
    }

    inline operator wrappedT() const
    {
        m_throw = false;
        return m_retval;
    }

    inline operator ignore_return_value() const
    {
        m_throw = false;
        return ignore_return_value();
    }

private:
    // No default construction
    throw_if_unchecked();

    mutable bool m_throw;
    wrappedT     m_retval;
};


} // namespace fhtagn

#endif // guard
