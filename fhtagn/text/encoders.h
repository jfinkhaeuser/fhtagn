/**
 * $Id$
 *
 * Copyright (C) 2007 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_TEXT_ENCODERS_H
#define FHTAGN_TEXT_ENCODERS_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/text/transcoding.h>

namespace fhtagn {
namespace text {

/**
 * Encodes a UTF-32 character into a single ASCII byte. ASCII allows only 7 bit
 * values, i.e. all values above 127 are considered invalid.
 **/
struct ascii_encoder
{
    typedef char const * const_iterator;

    const_iterator begin() const
    {
        // If m_byte has a valid value, return m_byte's address. Else return
        // end()
        return &m_byte + (m_byte == -1 ? 1 : 0);
    }

    const_iterator end() const
    {
        return &m_byte + 1;
    }

    bool encode(utf32_char_t ch)
    {
        // Only characters with values <= 127 can be encoded in ASCII - higher
        // value characters require a different encoding. Note that this also
        // implies that the default replacement character 0xfffd cannot be
        // encoded in ASCII.
        if (0 <= ch && ch <= 127) {
            m_byte = static_cast<char>(ch);
            return true;
        }
        m_byte = -1; // signal empty buffer
        return false;
    }

    char m_byte;
};


}} // namespace fhtagn::text

#endif //guard
