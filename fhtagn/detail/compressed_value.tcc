/**
 * $Id: template.h 197 2008-11-02 12:02:37Z unwesen $
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <author@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_DETAIL_COMPRESSED_VALUE_TCC
#define FHTAGN_DETAIL_COMPRESSED_VALUE_TCC

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/compressed_value.h>

namespace fhtagn {

namespace detail {

/*****************************************************************************
 * Implementation for compressed_value_holder for when T is held by value
 **/
template <
  typename T,
  bool VALUE
>
compressed_value_holder<T, VALUE>::compressed_value_holder()
  : m_t()
{
}



template <
  typename T,
  bool VALUE
>
compressed_value_holder<T, VALUE>::compressed_value_holder(T const & t)
  : m_t(t)
{
}



template <
  typename T,
  bool VALUE
>
compressed_value_holder<T, VALUE>::~compressed_value_holder()
{
}



template <
  typename T,
  bool VALUE
>
T *
compressed_value_holder<T, VALUE>::get()
{
  return &m_t;
}



template <
  typename T,
  bool VALUE
>
T const *
compressed_value_holder<T, VALUE>::get() const
{
  return &m_t;
}


/*****************************************************************************
 * Specialization for compressed_value_holder for when T is held via a pointer
 **/
template <
  typename T
>
struct compressed_value_holder<T, false>
{
  inline compressed_value_holder()
    : m_t(new T())
  {
  }



  inline compressed_value_holder(T const & t)
    : m_t(new T(t))
  {
  }



  inline ~compressed_value_holder()
  {
    delete m_t;
  }



  inline T * get()
  {
    return m_t;
  }



  inline T const * get() const
  {
    return m_t;
  }



  T * m_t;
};



} // namespace detail

/*****************************************************************************
 * Implementation for compressed_value
 **/
template <typename T>
compressed_value<T>::compressed_value()
  : m_holder()
{
}



template <typename T>
compressed_value<T>::compressed_value(T const & t)
  : m_holder(t)
{
}



template <typename T>
compressed_value<T>::~compressed_value()
{
}



template <typename T>
compressed_value<T>::compressed_value(compressed_value<T> const & other)
  : m_holder(*other.m_holder.get())
{
}



template <typename T>
compressed_value<T> &
compressed_value<T>::operator=(compressed_value<T> const & other)
{
  *m_holder.get() = *other.m_holder.get();
  return *this;
}



template <typename T>
T *
compressed_value<T>::operator->()
{
  return m_holder.get();
}



template <typename T>
T * const
compressed_value<T>::operator->() const
{
  return m_holder.get();
}


template <typename T>
T &
compressed_value<T>::operator*()
{
  return *m_holder.get();
}



template <typename T>
T const &
compressed_value<T>::operator*() const
{
  return *m_holder.get();
}


} // namespace fhtagn

#endif // guard
