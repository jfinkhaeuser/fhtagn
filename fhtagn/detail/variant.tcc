/**
 * Copyright (C) 2007 the authors.
 *
 * Author: Henning Pfeiffer <slashgod@users.sourceforge.net>
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_VARIANT_TCC
#define FHTAGN_VARIANT_TCC

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

template <typename T>
variant::variant(T const & other)
    : m_state(IS_VALUE)
    , m_data()
{
    instanciate_invalid_value();
    this->operator=(other);
}


template <typename T>
variant::variant &
variant::operator=(T const & other)
{
    switch (m_state) {
        case IS_INVALID:
            throw error("Cannot assign to the variant::invalid_value!");
            break;

        case IS_EMPTY:
        case IS_VALUE:
            if (this != reinterpret_cast<variant const *>(&other)) {
                m_data = typename specialization_traits<T>::holder_type(other);
                // we don't actually know if other is a value, but we hope it is.
                m_state = IS_VALUE;
            }
            break;

        default:
            assert(0);
    }

    return *this;
}


template <typename T>
typename variant::specialization_traits<T>::holder_type &
variant::as()
{
    return *boost::any_cast<typename specialization_traits<T>::holder_type>(
        &m_data);
}


template <typename T>
typename variant::specialization_traits<T>::holder_type const &
variant::as() const
{
    return *boost::any_cast<typename specialization_traits<T>::holder_type>(
        &m_data);
}


template <typename T>
bool
variant::is() const
{
    return (0 != boost::any_cast<typename specialization_traits<T>::holder_type>(
          &m_data));
}


inline bool
variant::is_valid() const
{
    return (m_state != IS_INVALID);
}


template <typename T>
inline bool
variant::check(variant const & var)
{
    try {
        return var.is<T>();
    } catch (error const & ex) {
        return false;
    }
}


inline bool
variant::exists(variant const & var)
{
    return var.is_valid();
}


template <typename T>
inline
typename variant::specialization_traits<T>::holder_type const &
variant::safe_get(variant const & var)
{
    if (!var.is<T>()) {
        throw variant::error("fhtagn::variant::safe_get: invalid type");
    }
    return var.as<T>();
}


template <typename T>
inline
typename variant::specialization_traits<T>::holder_type &
variant::safe_get(variant & var)
{
    if (!var.is<T>()) {
        throw variant::error("fhtagn::variant::safe_get: invalid type");
    }
    return var.as<T>();
}



} // namespace fhtagn

// internal specialization for variant special types
FHTAGN_VARIANT_SPECIALIZE(fhtagn::variant::map_t);
FHTAGN_VARIANT_SPECIALIZE(fhtagn::variant::array_t);

#endif // guard
