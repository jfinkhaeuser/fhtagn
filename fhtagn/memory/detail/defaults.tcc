/**
 * $Id: template.h 197 2008-11-02 12:02:37Z unwesen $
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_MEMORY_DETAIL_DEFAULTS_TCC
#define FHTAGN_MEMORY_DETAIL_DEFAULTS_TCC

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <limits>

namespace fhtagn {
namespace memory {

/*****************************************************************************
 * default_allocation_policy
 **/
template <
  typename T
>
default_allocation_policy<T>::default_allocation_policy()
{
}



template <
  typename T
>
default_allocation_policy<T>::~default_allocation_policy()
{
}



template <
  typename T
>
default_allocation_policy<T>::default_allocation_policy(
    default_allocation_policy<T> const &)
{
}


template <
  typename T
>
template <
  typename U
>
default_allocation_policy<T>::default_allocation_policy(
    default_allocation_policy<U> const &)
{
}



template <
  typename T
>
typename default_allocation_policy<T>::pointer
default_allocation_policy<T>::allocate(size_type count,
    typename std::allocator<void>::const_pointer /* = 0 */)
{
  return reinterpret_cast<pointer>(::operator new(count * sizeof(T)));
}



template <
  typename T
>
void
default_allocation_policy<T>::deallocate(pointer p, size_type)
{
  ::operator delete(p);
}


template <
  typename T
>
typename default_allocation_policy<T>::size_type
default_allocation_policy<T>::max_size() const
{
  return std::numeric_limits<size_type>::max();
}



template <
  typename T1,
  typename T2
>
inline bool operator==(
    default_allocation_policy<T1> const &,
    default_allocation_policy<T2> const &)
{
  return true;
}



template <
  typename T,
  typename other_allocatorT
>
inline bool operator==(
    default_allocation_policy<T> const &,
    other_allocatorT const &)
{
  return false;
}



/*****************************************************************************
 * default_object_traits
 **/

template <
  typename T
>
default_object_traits<T>::default_object_traits()
{
}



template <
  typename T
>
default_object_traits<T>::~default_object_traits()
{
}



template <
  typename T
>
template <
  typename U
>
default_object_traits<T>::default_object_traits(default_object_traits<U> const &)
{
}



template <
  typename T
>
T *
default_object_traits<T>::address(T & t)
{
  return &t;
}



template <
  typename T
>
T const *
default_object_traits<T>::address(T const & t)
{
  return &t;
}



template <
  typename T
>
void
default_object_traits<T>::construct(T * p, T const & t)
{
  new(p) T(t);
}



template <
  typename T
>
void
default_object_traits<T>::destroy(T * p)
{
  p->~T();
}

}} // namespace fhtagn::memory

#endif // guard
