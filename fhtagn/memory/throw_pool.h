/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_MEMORY_THROW_POOL_H
#define FHTAGN_MEMORY_THROW_POOL_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <new>

#include <fhtagn/fhtagn.h>

#include <fhtagn/memory/memory_pool.h>

namespace fhtagn {
namespace memory {

/**
 * The throw_pool class is a simple wrapper around a MemoryPool pool, that
 * catches when NULL is returned from alloc or realloc, and throws an
 * exception.
 *
 * The reason behind this is that while it's common for the C-style malloc/
 * realloc functions on which the MemoryPool is modelled to return NULL in
 * out-of-memory conditions (or on other errors), C++ code using STL-style
 * allocators will expect an exception.
 **/
template <
  typename memory_poolT
>
struct throw_pool
{
  BOOST_CLASS_REQUIRE(memory_poolT, ::fhtagn::memory::concepts,
      MemoryPoolConcept);


  throw_pool(memory_poolT & pool)
    : m_pool(pool)
  {
  }



  inline void * alloc(fhtagn::size_t size)
  {
    void * ret = m_pool.alloc(size);
    if (!ret) {
      throw std::bad_alloc();
    }
    return ret;
  }



  inline void * realloc(void * ptr, fhtagn::size_t new_size)
  {
    void * ret = m_pool.realloc(ptr, new_size);
    if (!ret) {
      throw std::bad_alloc();
    }
    return ret;
  }



  inline void free(void * ptr)
  {
    return m_pool.free(ptr);
  }



  inline bool in_use() const
  {
    return m_pool.in_use();
  }



  inline fhtagn::size_t alloc_size(void * ptr) const
  {
    return m_pool.alloc_size(ptr);
  }

private:

  memory_poolT &  m_pool;
};


}} // namespace fhtagn::memory

#endif // guard
