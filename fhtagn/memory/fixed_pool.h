/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_MEMORY_FIXED_POOL_H
#define FHTAGN_MEMORY_FIXED_POOL_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

#include <map>

#include <fhtagn/memory/memory_pool.h>

namespace fhtagn {
namespace memory {

/**
 * The fixed_pool class implements a MemoryPool that allocates space from a
 * fixed-sized chunk of preallocated memory. fixed_pool does not allocate this
 * chunk of memory itself, nor frees it, but merely subdivides it.
 *
 * As a result, fixed_pool works equally well with a heap and stack memory;
 * it's the perfect pool for allocation a reasonably small amount of stack or
 * heap at the start of your program, to allocate memory from for fatal error
 * handling.
 *
 * Either way, you must ensure yourself that the memory handled by fixed_pool
 * lives at least as long as the pool itself, and the pool itself should not
 * be destroyed as long as in_use() returns true.
 *
 * TODO templatize with mutexT
 **/
class fixed_pool
{
public:
  inline fixed_pool(void * memblock, std::size_t size);

  /**
   * API - see memory_pool.h for details
   **/
  inline void * alloc(std::size_t size);
  inline void * realloc(void * ptr, std::size_t new_size);
  inline void free(void * ptr);
  inline bool in_use() const;

private:

  inline void defragment_free_list();

  typedef std::multimap<std::size_t, void *>  free_list_t;
  typedef std::map<void *, size_t>            alloc_list_t;

  void *        m_memblock;
  std::size_t   m_size;
  free_list_t   m_free_list;
  alloc_list_t  m_alloc_list;
};


}} // namespace fhtagn::memory

#include <fhtagn/memory/detail/fixed_pool.tcc>

#endif // guard
