/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_MEMORY_COMMON_H
#define FHTAGN_MEMORY_COMMON_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

namespace fhtagn {
namespace memory {

/**
 * Used in both block_pool and fixed_pool: two policies that either adopt a
 * pointer (that is, delete it in the dtor) or not.
 **/
template <typename T>
struct adopt_policy
{
  inline adopt_policy(T * obj)
    : m_obj(obj)
  {
  }

  inline ~adopt_policy()
  {
    delete m_obj;
  }

  T * & m_obj;
};



template <typename T>
struct adopt_array_policy
{
  inline adopt_array_policy(T * array)
    : m_array(array)
  {
  }

  inline ~adopt_array_policy()
  {
    delete [] m_array;
  }

  T * & m_array;
};



template <typename T>
struct ignore_policy
{
  inline ignore_policy(T *)
  {
  }
};



template <typename T>
struct ignore_array_policy
{
  inline ignore_array_policy(T *)
  {
  }
};

}} // namespace fhtagn::memory

#endif // guard
