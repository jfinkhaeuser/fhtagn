/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_MEMORY_BLOCK_POOL_H
#define FHTAGN_MEMORY_BLOCK_POOL_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

#include <fhtagn/memory/utility.h>
#include <fhtagn/memory/memory_pool.h>
#include <fhtagn/threads/lock_policy.h>

namespace fhtagn {
namespace memory {

/**
 * The block_pool class implements a memory pool with very limited use in
 * combination with the pool_allocator_policy: it only hands out chunks of
 * the same, static size.
 *
 * Any attempt to allocate memory of a different size from it will fail. As
 * a side-effect, realloc will always fail unless the new size happens to be
 * the same as the old.
 *
 * Like the fixed_pool class, it allocates from memory handed to it's
 * constructor, and like the fixed_pool class it tries to return only memory
 * aligned at some definable block boundary.
 **/
template <
  fhtagn::size_t BLOCK_SIZE,
  typename mutexT = fhtagn::threads::fake_mutex,
  typename block_alignmentT = block_alignment<>
>
class block_pool
{
public:
  /**
   * Convenience typedefs
   **/
  typedef mutexT            mutex_t;
  typedef block_alignmentT  block_alignment_t;

  /**
   * The constructor accepts a pointer to a block of memory of the given size.
   * Note that the class does not take ownership of this memory; you must ensure
   * yourself that the memory lives at least as long as this block_pool
   * instance.
   **/
  inline block_pool(void * memblock, fhtagn::size_t size);

  /**
   * API - see memory_pool.h for details
   **/
  inline void * alloc(fhtagn::size_t size);
  inline void * realloc(void * ptr, fhtagn::size_t new_size);
  inline void free(void * ptr);
  inline bool in_use() const;
  inline fhtagn::size_t alloc_size(void * ptr) const;

private:

  enum {
    BITS_PER_SIZE_T = sizeof(fhtagn::size_t) * 8,
  };

  void *            m_memblock;
  fhtagn::size_t *  m_metadata;
  fhtagn::size_t    m_size;

  mutable mutex_t   m_mutex;
};


}} // namespace fhtagn::memory

#include <fhtagn/memory/detail/block_pool.tcc>

#endif // guard
