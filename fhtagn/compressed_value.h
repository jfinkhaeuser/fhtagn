/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <author@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_COMPRESSED_VALUE_H
#define FHTAGN_COMPRESSED_VALUE_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

namespace fhtagn {

/**
 * The compressed_value class provides a thin wrapper around a value type that
 * provides an interface much like a pointer. It will either encapsulate an
 * instance of the value type directly, or a pointer to the value type, picking
 * the smaller of the two so you don't have to.
 *
 * Note that of course the total memory usage of a compresssed_value<T> where
 * sizeof(T) is larger than sizeof(T*) rises, so the usefulness of this class
 * is fairly restricted.
 **/
namespace detail {

template <
  typename T,
  bool VALUE
>
struct compressed_value_holder
{
  inline compressed_value_holder();
  inline compressed_value_holder(T const & t);
  inline ~compressed_value_holder();

  inline T * get();
  inline T const * get() const;

  T m_t;
};

} // namespace detail

template <typename T>
class compressed_value
{
public:
  /**
   * Construction, destruction.
   **/
  inline compressed_value();
  inline compressed_value(T const & t);
  inline ~compressed_value();

  /**
   * Copying.
   **/
  inline compressed_value(compressed_value<T> const & other);
  inline compressed_value & operator=(compressed_value<T> const & other);

  /**
   * Pointer functions
   **/
  inline T * operator->();
  inline T * const operator->() const;

  inline T & operator*();
  inline T const & operator*() const;

private:
  typename detail::compressed_value_holder<
    T,
    sizeof(T) <= sizeof(T*)
  > m_holder;
};

} // namespace fhtagn

#include <fhtagn/detail/compressed_value.tcc>

#endif // guard
