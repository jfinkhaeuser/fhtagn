/**
 * $Id$
 *
 * Copyright (C) 2007 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_H
#define FHTAGN_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#define NOMINMAX
#include <windows.h>
#endif

#include <fhtagn/fhtagn-config.h>

#ifndef HAVE_BOOST_CSTDINT_HPP
#error Fhtagn! requires definitions for standard integer types
#endif
#include <boost/cstdint.hpp>

namespace fhtagn {

/**
 * Define size_t again, just to have a ssize_t and size_t in the same
 * namespace
 **/
typedef ::size_t size_t;

/**
 * Define ssize_t, if it doesn't exist yet.
 **/
namespace detail {

template <int SIZE_T_SIZE>
struct ssize_t_size_detector
{
};

template <>
struct ssize_t_size_detector<2>
{
  typedef boost::int16_t ssize_t;
};

#if defined(HAVE_BOOST__INT32_T)
template <>
struct ssize_t_size_detector<4>
{
  typedef boost::int32_t ssize_t;
};
#endif

#if defined(HAVE_BOOST__INT64_T)
template <>
struct ssize_t_size_detector<8>
{
  typedef boost::int32_t ssize_t;
};
#endif

} // namespace detail

typedef detail::ssize_t_size_detector<sizeof(size_t)>::ssize_t ssize_t;

} // namespace fhtagn

#endif // guard
