/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_ALLOCATORS_DETAIL_CONCEPTS_H
#define FHTAGN_ALLOCATORS_DETAIL_CONCEPTS_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

#include <boost/concept_check.hpp>

namespace fhtagn {
namespace allocators {
namespace concepts {

/**
 * AllocationPolicyConcept tries to ensure that your custom allocation policies
 * follow the concept expected by the allocator class below.
 **/
template <
  typename T,
  typename policyT
>
struct AllocationPolicyConcept
{
  void constraints()
  {
    // policies must have a few subtypes
    typedef typename policyT::value_type      value_type;
    typedef typename policyT::pointer         pointer;
    typedef typename policyT::const_pointer   const_pointer;
    typedef typename policyT::reference       reference;
    typedef typename policyT::const_reference const_reference;
    typedef typename policyT::size_type       size_type;
    typedef typename policyT::difference_type difference_type;

    // check for rebind.
    typedef typename policyT::template rebind<int>::other rebind_check;

    // check for ctors. can't check the ctor from a policy for a different type,
    // though.
    policyT p1;
    policyT p2(p1);

    // check for allocate/deallocate
    p = p1.allocate(s);
    p = p1.allocate(s, reinterpret_cast<std::allocator<void>::const_pointer>(0xdeadbeef));
    p1.deallocate(p, s);

    // check for max_size()
    s = p1.max_size();

    // Check for equality operator
    bool b = (p1 == p2);
    boost::ignore_unused_variable_warning(b);
  }

  typename policyT::pointer & p;
  typename policyT::size_type & s;
};


/**
 * Similarly, ObjectTraitsConcept tries to ensure that your custom object traits
 * provide the required functionality.
 **/
template <
  typename T,
  typename traitsT
>
struct ObjectTraitsConcept
{
  void constraints()
  {
    // check for rebind
    typedef typename traitsT::template rebind<int>::other rebind_check;

    // check for ctors. can't check the ctor from a policy for a different type,
    // though.
    traitsT t1;
    traitsT t2(t1);

    // check for address functions
    p1 = t1.address(t);
    p2 = t1.address(const_t);

    // construction/destruction
    t1.construct(p1, const_t);
    t1.destroy(p1);
  }


  T & t;
  T * p1;

  T const & const_t;
  T const * p2;
};

}}} // namespace fhtagn::allocators::concepts

#endif // guard
