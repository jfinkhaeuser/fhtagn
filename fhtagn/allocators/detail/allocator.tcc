/**
 * $Id: template.h 197 2008-11-02 12:02:37Z unwesen $
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_ALLOCATORS_DETAIL_ALLOCATOR_TCC
#define FHTAGN_ALLOCATORS_DETAIL_ALLOCATOR_TCC

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

namespace fhtagn {
namespace allocators {


template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
allocator<T, allocation_policyT, object_traitsT>::allocator()
{
}



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
allocator<T, allocation_policyT, object_traitsT>::~allocator()
{
}



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
allocator<T, allocation_policyT, object_traitsT>::allocator(
    allocator<T, allocation_policyT, object_traitsT> const & other)
  : allocation_policyT(other)
  , object_traitsT(other)
{
}



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
template <
  typename U
>
allocator<T, allocation_policyT, object_traitsT>::allocator(
    allocator<U> const &)
{
}



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
template <
  typename U,
  typename other_policyT,
  typename other_traitsT
>
allocator<T, allocation_policyT, object_traitsT>::allocator(
    allocator<U, other_policyT, other_traitsT> const & other)
  : allocation_policyT(other)
  , object_traitsT(other)
{
}



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
inline bool operator==(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    allocator<T, allocation_policyT, object_traitsT> const & rhs)
{
  return operator==(
      static_cast<allocation_policyT &>(lhs),
      static_cast<allocation_policyT &>(rhs));
}



template <
  typename T1,
  typename allocation_policyT1,
  typename object_traitsT1,
  typename T2,
  typename allocation_policyT2,
  typename object_traitsT2
>
inline bool operator==(
    allocator<T1, allocation_policyT1, object_traitsT1> const & lhs,
    allocator<T2, allocation_policyT2, object_traitsT2> const & rhs)
{
  return operator==(
      static_cast<allocation_policyT1 &>(lhs),
      static_cast<allocation_policyT2 &>(rhs));
}


template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT,
  typename other_allocatorT
>
inline bool operator==(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    other_allocatorT const & rhs)
{
  return operator==(static_cast<allocation_policyT &>(lhs), rhs);
}



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
inline bool operator!=(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    allocator<T, allocation_policyT, object_traitsT> const & rhs)
{
  return !operator==(lhs, rhs);
}



template <
  typename T1,
  typename allocation_policyT1,
  typename object_traitsT1,
  typename T2,
  typename allocation_policyT2,
  typename object_traitsT2
>
inline bool operator!=(
    allocator<T1, allocation_policyT1, object_traitsT1> const & lhs,
    allocator<T2, allocation_policyT2, object_traitsT2> const & rhs)
{
  return !operator==(lhs, rhs);
}


template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT,
  typename other_allocatorT
>
inline bool operator!=(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    other_allocatorT const & rhs)
{
  return !operator==(lhs, rhs);
}





}} // namespace fhtagn::allocators
#endif // guard
