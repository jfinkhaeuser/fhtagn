/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_ALLOCATORS_ALLOCATOR_H
#define FHTAGN_ALLOCATORS_ALLOCATOR_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

#include <fhtagn/allocators/detail/concepts.h>
#include <fhtagn/allocators/defaults.h>

namespace fhtagn {
namespace allocators {

/**
 * Following a 2003 article on memory allocators (which you can find at
 * http://www.codeproject.com/KB/cpp/allocator.aspx), this class defines an
 * STL-compatible memory allocator.
 *
 * It delegates most of it's work to an object traits type, and to a memory
 * allocation policy type, allowing for maximum extensibility.
 **/
template<
  typename T,
  typename allocation_policyT = default_allocation_policy<T>,
  typename object_traitsT = default_object_traits<T>
>
class allocator
  : public allocation_policyT
  , public object_traitsT
{
public:
  /**
   * Concept checks, to catch errors early on.
   **/
  BOOST_CLASS_REQUIRE2(T,
      allocation_policyT,
      ::fhtagn::allocators::concepts,
      AllocationPolicyConcept);

  BOOST_CLASS_REQUIRE2(T,
      object_traitsT,
      ::fhtagn::allocators::concepts,
      ObjectTraitsConcept);


  /**
   * Typedefs, aliased from allocation policy.
   **/
  typedef typename allocation_policyT::size_type size_type;
  typedef typename allocation_policyT::difference_type difference_type;
  typedef typename allocation_policyT::pointer pointer;
  typedef typename allocation_policyT::const_pointer const_pointer;
  typedef typename allocation_policyT::reference reference;
  typedef typename allocation_policyT::const_reference const_reference;
  typedef typename allocation_policyT::value_type value_type;

  /**
   * Rebind this allocator to one for a different type.
   **/
  template <typename U>
  struct rebind
  {
    typedef allocator<
      U,
      typename allocation_policyT::template rebind<U>::other,
      typename object_traitsT::template rebind<U>::other
    > other;
  };


  /**
   * Constructors, for default construction, for construction from an equivalent
   * allocator, from allocators for different types, or even from allocators
   * with different allocation policies/object traits.
   **/
  inline explicit allocator();
  inline ~allocator();

  inline allocator(allocator const & other);

  template <typename U>
  inline allocator(allocator<U> const &);

  template <typename U, typename other_policyT, typename other_traitsT>
  inline allocator(allocator<U, other_policyT, other_traitsT> const & other);
};


/**
 * Equality and inequality comparison operators - used to detect if memory
 * allocated from one allocator can be deallocated from the current one.
 * Many variations again, as with the constructors.
 **/
template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
inline bool operator==(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    allocator<T, allocation_policyT, object_traitsT> const & rhs);



template <
  typename T1,
  typename allocation_policyT1,
  typename object_traitsT1,
  typename T2,
  typename allocation_policyT2,
  typename object_traitsT2
>
inline bool operator==(
    allocator<T1, allocation_policyT1, object_traitsT1> const & lhs,
    allocator<T2, allocation_policyT2, object_traitsT2> const & rhs);



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT,
  typename other_allocatorT
>
inline bool operator==(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    other_allocatorT const & rhs);



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT
>
inline bool operator!=(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    allocator<T, allocation_policyT, object_traitsT> const & rhs);



template <
  typename T1,
  typename allocation_policyT1,
  typename object_traitsT1,
  typename T2,
  typename allocation_policyT2,
  typename object_traitsT2
>
inline bool operator!=(
    allocator<T1, allocation_policyT1, object_traitsT1> const & lhs,
    allocator<T2, allocation_policyT2, object_traitsT2> const & rhs);



template <
  typename T,
  typename allocation_policyT,
  typename object_traitsT,
  typename other_allocatorT
>
inline bool operator!=(
    allocator<T, allocation_policyT, object_traitsT> const & lhs,
    other_allocatorT const & rhs);


}} // namespace fhtagn::allocators

#include <fhtagn/allocators/detail/allocator.tcc>

#endif // guard
