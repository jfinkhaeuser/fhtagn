/**
 * $Id: tasklet.cpp 272 2009-04-18 23:35:59Z unwesen $
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_THREADS_DETAIL_FUTURE_TCC
#define FHTAGN_THREADS_DETAIL_FUTURE_TCC


namespace fhtagn {
namespace threads {

/*****************************************************************************
 * futures::exception
 **/
namespace futures {

exception::exception(std::string const & msg)
  : std::runtime_error(msg)
{
}

} // namespace futures



/*****************************************************************************
 * future
 **/
template <
  typename return_valueT
>
future<return_valueT>::future(typename future::func_type::slot_type slot)
  : property_t(this, &future<return_valueT>::get)
  , m_thread(NULL)
  , m_value(NULL)
  , m_caught_ex(NULL)
{
  m_func.connect(slot);
  start_thread();
}



template <
  typename return_valueT
>
future<return_valueT>::future(typename future::func_type::slot_type slot,
    futures::lazy_evaluate const &)
  : property_t(this, &future::get)
  , m_thread(NULL)
  , m_value(NULL)
  , m_caught_ex(NULL)
{
  m_func.connect(slot);
}



template <
  typename return_valueT
>
future<return_valueT>::~future()
{
  if (m_thread) {
    m_thread->join();
    delete m_thread;
  }

  delete m_value;
  delete m_caught_ex;
}



template <
  typename return_valueT
>
void
future<return_valueT>::start_thread()
{
  m_thread = new boost::thread(boost::bind(&future::thread_runner,
        this));
}



template <
  typename return_valueT
>
return_valueT
future<return_valueT>::get() const
{
  boost::mutex::scoped_lock l(m_mutex);
  if (!(m_value || m_caught_ex)) {
    // If there's no thread, start it. That happens with lazy evaluation.
    if (!m_thread) {
      const_cast<future*>(this)->start_thread();
    }

    // Wait for the thread to finish.
    while (!(m_value || m_caught_ex)) {
      m_finish.wait(l);
    }
  }

  // May need to throw an exception.
  if (m_caught_ex) {
    std::string msg = m_caught_ex->what();
    throw futures::exception(msg.c_str());
  }

  // Return value!
  return *m_value;
}



template <
  typename return_valueT
>
void
future<return_valueT>::thread_runner()
{
  return_valueT * value = NULL;
  futures::exception * caught_ex = NULL;
  try {
    value = new return_valueT(m_func());

  } catch (std::exception const & ex) {
    boost::mutex::scoped_lock l(m_mutex);
    caught_ex = new futures::exception(ex.what());

  } catch (...) {
    boost::mutex::scoped_lock l(m_mutex);
    caught_ex = new futures::exception("Unspecified exception occurred in "
        "bound function.");
  }

  // Store value and signal that we're done.
  boost::mutex::scoped_lock l(m_mutex);
  m_value = value;
  m_caught_ex = caught_ex;

  m_finish.notify_all();
}



}} // namespace fhtagn::threads


#endif // guard
