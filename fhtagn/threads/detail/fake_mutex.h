/**
 * $Id$
 *
 * Copyright (C) 2008 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_THREADS_DETAIL_FAKE_MUTEX_H
#define FHTAGN_THREADS_DETAIL_FAKE_MUTEX_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

// FIXME #include <exception>
// FIXME 
// FIXME #include <boost/signal.hpp>
// FIXME #include <boost/thread.hpp>
//
#include <boost/noncopyable.hpp>
#include <boost/thread/xtime.hpp>

namespace fhtagn {
namespace threads {

/**
 * Provides an interface like boost's mutexes, but does nothing at all. Since it
 * does nothing at all, it might as well provide all the lock types.
 **/
class fake_mutex
    : private boost::noncopyable
{
public:
    class scoped_lock
        : public boost::noncopyable
    {
    public:
        scoped_lock(fake_mutex & m, bool initially_locked = true)
            : m_locked(initially_locked)
        {
        }

        void lock()
        {
            m_locked = true;
        }

        void unlock()
        {
            m_locked = false;
        }

        bool locked() const { return m_locked; }
        operator void const *() const { return m_locked ? this : 0; }
    private:
        bool m_locked;
    };



    class scoped_try_lock
        : public boost::noncopyable
    {
    public:
        scoped_try_lock(fake_mutex & m)
            : m_locked(false)
        {
            try_lock();
        }

        scoped_try_lock(fake_mutex & m, bool initially_locked)
            : m_locked(false)
        {
            if (initially_locked) lock();
        }

        void lock()
        {
            if (m_locked) throw boost::lock_error();
            m_locked = true;
        }

        bool try_lock()
        {
            lock();
            return true;
        }

        void unlock()
        {
            if (!m_locked) throw boost::lock_error();
            m_locked = false;
        }

        bool locked() const { return m_locked; }
        operator void const *() const { return m_locked ? this : 0; }
    private:
        bool m_locked;
    };



    class scoped_timed_lock
        : public boost::noncopyable
    {
        scoped_timed_lock(fake_mutex & m, boost::xtime const & xt)
        {
        }
            // TODO
            // - finish
            // - make lock types noncopyable
    };




    /*************************************************************************
     * Lockable implementation
     */
    void lock()
    {
      // TODO
    }


    bool try_lock()
    {
      // TODO
    }

    void unlock()
    {
      // TODO
    }


    /*************************************************************************
     * TimedLockable implementation
     */
    bool timed_lock(boost::system_time const & abs_time)
    {
      // TODO
    }


    template <typename time_durationT>
    bool timed_lock(time_durationT const & rel_time)
    {
      // TODO
    }


    /*************************************************************************
     * SharedLockable implementation
     */
    void lock_shared()
    {
      // TODO
    }


    bool try_lock_shared()
    {
      // TODO
    }


    void unlock_shared()
    {
      // TODO
    }


    bool timed_lock_shared(boost::system_time const & abs_time)
    {
      // TODO
    }


    /*************************************************************************
     * UpgradeLockable implementation
     */
    void lock_upgrade()
    {
      // TODO
    }


    void unlock_upgrade()
    {
      // TODO
    }


    void unlock_upgrade_and_lock()
    {
      // TODO
    }


    void unlock_and_lock_upgrade()
    {
      // TODO
    }


    void unlock_upgrade_and_lock_shared()
    {
      // TODO
    }
};

}} // namespace fhtagn::threads

#endif // guard
