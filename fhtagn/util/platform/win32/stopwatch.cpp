/**
 * $Id: stopwatch.cpp 300 2009-04-30 19:09:22Z unwesen $
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/

#include <fhtagn/util/stopwatch.h>

#include <stdexcept>

namespace fhtagn {
namespace util {

stopwatch::times_t
stopwatch::get_absolute_times()
{
  // Grab times from runtime
  FILETIME starttime;
  FILETIME endtime;
  FILETIME systime;
  FILETIME usertime;

  if (0 == GetProcessTimes(GetCurrentProcess(), &starttime, &endtime, &systime,
        &usertime))
  {
    LPVOID buf;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
        NULL,
        GetLastError(),
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR) &buf,
        0, NULL);

    std::runtime_error err = std::runtime_error(static_cast<char *>(buf));
    LocalFree(buf);
    throw err;
  }

  // Convert wall time
  ULARGE_INTEGER wall_start;
  ::memcpy(&wall_start, &starttime, sizeof(FILETIME));
  wall_start.QuadPart /= 10L;

  ULARGE_INTEGER wall_end;
  ::memcpy(&wall_end, &endtime, sizeof(FILETIME));
  wall_end.QuadPart /= 10L;

  usec_t wall_time = wall_end.QuadPart - wall_start.QuadPart;

  // Convert system & user times
  ULARGE_INTEGER sys;
  ::memcpy(&sys, &systime, sizeof(FILETIME));
  usec_t sys_time = sys.QuadPart / 10L;

  ULARGE_INTEGER user;
  ::memcpy(&user, &usertime, sizeof(FILETIME));
  usec_t user_time = user.QuadPart / 10L;

  return boost::make_tuple(wall_time, sys_time, user_time);
}

}} // namespace fhtagn::util
