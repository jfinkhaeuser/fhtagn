/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/

#include <fhtagn/util/stopwatch.h>

#include <errno.h>
#include <sys/resource.h>
#include <sys/time.h>

#include <stdexcept>

namespace fhtagn {
namespace util {

stopwatch::stopwatch()
{
  reset();
}



void
stopwatch::reset()
{
  m_start = m_checkpoint = get_absolute_times();
}



stopwatch::times_t
stopwatch::get_absolute_times()
{
  // Initialize wall time
  struct ::timeval tv;
  int res = ::gettimeofday(&tv, NULL);
  if (-1 == res) {
    throw std::runtime_error(::strerror(errno));
  }
  usec_t wall_time = (static_cast<usec_t>(tv.tv_sec) * 1000000) + tv.tv_usec;

  // Initialize system & user time
  struct ::rusage usg;
  res = ::getrusage(RUSAGE_SELF, &usg);
  if (-1 == res) {
    throw std::runtime_error(::strerror(errno));
  }
  usec_t sys_time = (static_cast<usec_t>(usg.ru_stime.tv_sec) * 1000000)
    + usg.ru_stime.tv_usec;
  usec_t user_time = (static_cast<usec_t>(usg.ru_utime.tv_sec) * 1000000)
    + usg.ru_utime.tv_usec;

  return boost::make_tuple(wall_time, sys_time, user_time);
}



stopwatch::times_t
stopwatch::get_times()
{
  times_t current = get_absolute_times();
  times_t result = boost::make_tuple(
      current.get<0>() - m_checkpoint.get<0>(),
      current.get<1>() - m_checkpoint.get<1>(),
      current.get<2>() - m_checkpoint.get<2>());
  m_checkpoint = current;
  return result;
}



stopwatch::times_t
stopwatch::get_cumulative_times()
{
  times_t current = get_absolute_times();
  times_t result = boost::make_tuple(
      current.get<0>() - m_start.get<0>(),
      current.get<1>() - m_start.get<1>(),
      current.get<2>() - m_start.get<2>());
  return result;
}


}} // namespace fhtagn::util
