/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_UTIL_STOPWATCH_H
#define FHTAGN_UTIL_STOPWATCH_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

#include <boost/tuple/tuple.hpp>

namespace fhtagn {
namespace util {

/**
 * Simple stopwatch class.
 *
 * Note that any of the below functions can throw a std::runtime_error if and
 * one of the underlying system calls fails. This is not to be expected, though.
 **/
class stopwatch
{
public:
  /**
   * We expect int64_t to exist here. Failing that, we very definitely expect
   * int32_t to exist. That may not be utterly portable, but it's still fairly
   * reasonable for utility code.
   **/
#if HAVE_BOOST__INT64_T
  typedef boost::int64_t usec_t;
#else
  typedef boost::int32_t usec_t;
#endif

  /**
   * The times the stopwatch returns are a wall time, system time and user time
   * (in that order), all in microseconds.
   **/
  typedef boost::tuple<usec_t, usec_t, usec_t>  times_t;

  /**
   * The constructor retrieves and stores the current absolute wall, system and
   * user times.
   **/
  stopwatch();

  /**
   * Returns the current absolute wall, system and user times.
   **/
  times_t get_absolute_times();

  /**
   * Resets the stored absolute wall, system and user times with current values.
   * This affects the times returned by get_cumulative_times()
   **/
  void reset();

  /**
   * Returns the the difference between the stored wall, system and user times
   * and the current values. Also stores the current values, so subsequent calls
   * to get_times() return the difference between these calls.
   **/
  times_t get_times();

  /**
   * Returns the difference in time between either the construction of this
   * object or the last reset() call.
   **/
  times_t get_cumulative_times();

private:
  times_t m_start;
  times_t m_checkpoint;
};


}} // namespace fhtagn::util

#endif // guard
