Source code:

- variants:
  - replace boost::any with home-grown solution
  - add comparison operators that throw on type mismatch, else use std::less,
    etc. Use traits to determine the appropriate specialization for the holder
    type. Might require the home-grown any replacement above.
- char encoding:
  - http://en.wikipedia.org/wiki/ISO/IEC_8859-1#ISO-8859-1
    difference between ISO 8859-1 and ISO-8859-1 ?
  - add mac-roman? http://en.wikipedia.org/wiki/Mac-Roman
  - stream transcoder - accepts istream ref in it's ctor, and has an ostream<<
    operator.
- threads:
  - pre-defined locking policies, for easier implementation of code that makes
    use of locking policies
- "message passing":
  - first cut, intra-process message passing, such as from thread to thread.
    must be lock-free or deadlock-resistant. must enable the following to be
    implemented on top of it:
    - be notified of changes in another thread's state
    - retrieve state of other thread
    - change state of other threads
- xml:
  - clean up
  - add good error reporting (which line/character failed)
  - add character encoding awareness (see xparser above)
  - add namespace awareness
  - xml entity encoder - encode characters outside of a given charset as
    &#1234; entities
  - add (optional) validation
- stack based allocator
  - split into traits & policies (see linked article). investigate if we need to
    throw out-of-memory ourselves or that happens when we return 0.
- move url class from libwool here
  - add composing of URLs (right now URL class can only parse)
- mime-parser
- array_list container, i.e. a rope-like approach to representing a random access
  container, except not a rope.
