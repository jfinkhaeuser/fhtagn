/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/

#include <vector>

#include <cppunit/extensions/HelperMacros.h>

#include <fhtagn/memory/allocator.h>
#include <fhtagn/memory/memory_pool.h>
#include <fhtagn/memory/fixed_pool.h>
#include <fhtagn/memory/pool_allocator.h>

FHTAGN_POOL_ALLOCATION_INITIALIZE;


class AllocatorTest
    : public CppUnit::TestFixture
{
public:
    CPPUNIT_TEST_SUITE(AllocatorTest);

      CPPUNIT_TEST(testHeapMemoryPool);
      CPPUNIT_TEST(testFixedMemoryPool);
      CPPUNIT_TEST(testFixedPoolFragmentation);

      CPPUNIT_TEST(testDefaults);
      CPPUNIT_TEST(testPoolAllocator);

    CPPUNIT_TEST_SUITE_END();
private:

    template <
      typename poolT
    >
    void testMemoryPoolGeneric(poolT & pool)
    {
      // Technically, these tests do not always have to succeed - but they're
      // the most basic memory pool tests and *should* always succeed on properly
      // set up pools.

      char * p = static_cast<char *>(pool.alloc(42));
      CPPUNIT_ASSERT(p);
      CPPUNIT_ASSERT_EQUAL(true, pool.in_use());

      p = static_cast<char *>(pool.realloc(p, 666));
      CPPUNIT_ASSERT(p);
      CPPUNIT_ASSERT_EQUAL(true, pool.in_use());

      pool.free(p);
    }


    void testHeapMemoryPool()
    {
      namespace mem = fhtagn::memory;

      mem::heap_pool p;

      CPPUNIT_ASSERT_EQUAL(true, p.in_use());
      testMemoryPoolGeneric(p);
      CPPUNIT_ASSERT_EQUAL(true, p.in_use());
    }


    void testFixedMemoryPool()
    {
      namespace mem = fhtagn::memory;

      char memory[1024] = { 0 };
      mem::fixed_pool p(memory, sizeof(memory));

      CPPUNIT_ASSERT_EQUAL(false, p.in_use());
      testMemoryPoolGeneric(p);
      CPPUNIT_ASSERT_EQUAL(false, p.in_use());
    }


    void testFixedPoolFragmentation()
    {
      // Test (de-)fragmentation in fixed pools
      namespace mem = fhtagn::memory;

      char memory[1024] = { 0 };
      mem::fixed_pool p(memory, sizeof(memory));

      // For this test, select an allocation size that's larger than the
      // segment header the fixed_pool allocator uses. That way we can produce
      // fragmentation easier.
      std::size_t alloc_size = 10 * sizeof(std::size_t);

      // Allocate three ints in a row. They should be contiguous, and all
      // three allocations should succeed.
      void * first = p.alloc(alloc_size);
      CPPUNIT_ASSERT(first);
      void * second = p.alloc(alloc_size);
      CPPUNIT_ASSERT(second);
      CPPUNIT_ASSERT(second > first);
      void * third = p.alloc(alloc_size);
      CPPUNIT_ASSERT(third);
      CPPUNIT_ASSERT(third > second);

      // Now free the second, and allocate the same amount again. The space
      // just freed should be re-used.
      void * second_prev = second;
      p.free(second);
      second = p.alloc(alloc_size);
      CPPUNIT_ASSERT(second);
      CPPUNIT_ASSERT_EQUAL(second_prev, second);

      // More importantly, if we free the second and allocate twice the amount,
      // that should be placed *behind* third, als there's not enough space
      // between first and third.
      p.free(second);
      second = p.alloc(alloc_size * 2);
      CPPUNIT_ASSERT(second);
      CPPUNIT_ASSERT(second > third);

      // Now we try to allocate half the size of an int in a fourth pointer.
      // That *should* return second_prev, as that's the first space large
      // enough to accommodate that.
      void * fourth = p.alloc(alloc_size / 2);
      CPPUNIT_ASSERT(fourth);
      CPPUNIT_ASSERT_EQUAL(second_prev, fourth);

      // Awesome. If we release fourth again, we'll have fragmentation. To test
      // that defragmentation works as expected, when we again allocate
      // alloc_size, it should again be placed at the same position second_prev
      // is pointing.
      p.free(fourth);
      fourth = p.alloc(alloc_size);
      CPPUNIT_ASSERT(fourth);
      CPPUNIT_ASSERT_EQUAL(second_prev, fourth);
    }



    template <
      typename allocatorT
    >
    void defaultTests()
    {
      typedef std::vector<int, allocatorT> vector_t;

      vector_t v;
      v.push_back(1);

      CPPUNIT_ASSERT(!v.empty());
      CPPUNIT_ASSERT_EQUAL(std::size_t(1), v.size());
      CPPUNIT_ASSERT_EQUAL(int(1), v[0]);

      v.push_back(666);
      v.push_back(42);
      CPPUNIT_ASSERT_EQUAL(std::size_t(3), v.size());
      CPPUNIT_ASSERT_EQUAL(int(666), v[1]);
      CPPUNIT_ASSERT_EQUAL(int(42), v[2]);

      // remove entry 666
      typename vector_t::iterator iter = v.begin();
      ++iter;
      v.erase(iter);
      CPPUNIT_ASSERT_EQUAL(std::size_t(2), v.size());
      CPPUNIT_ASSERT_EQUAL(int(1), v[0]);
      CPPUNIT_ASSERT_EQUAL(int(42), v[1]);

      // Push back a new entry
      v.push_back(1234);
      CPPUNIT_ASSERT_EQUAL(std::size_t(3), v.size());
      CPPUNIT_ASSERT_EQUAL(int(1), v[0]);
      CPPUNIT_ASSERT_EQUAL(int(42), v[1]);
      CPPUNIT_ASSERT_EQUAL(int(1234), v[2]);
    }



    void testDefaults()
    {
      // T is int in these tests.
      defaultTests<fhtagn::memory::allocator<int> >();
    }



    void testPoolAllocator()
    {
       // T is int in these tests.
       namespace mem = fhtagn::memory;

       // heap_pool tests - should always succeed, unless the machine runs out of memory.
       {
         typedef mem::allocator<int, mem::pool_allocation_policy<int> > allocator_t;

         // Set global pool to be an instance of heap_pool. That'll be the simplest.
         CPPUNIT_ASSERT(allocator_t::set_global_memory_pool(
               allocator_t::memory_pool_ptr(new mem::heap_pool())));

         defaultTests<allocator_t>();
       }

       // fixed_pool tests - the first test tests using a small amount of stack
       // memory.
       {
         typedef mem::allocator<int, mem::pool_allocation_policy<int, mem::fixed_pool> > allocator_t;

         // Set global pool to be an instance of fixed_pool. That'll be the simplest.
         char memory[200] = { 0 };
         CPPUNIT_ASSERT(allocator_t::set_global_memory_pool(
               allocator_t::memory_pool_ptr(
                 new mem::fixed_pool(memory, sizeof(memory)))));

         defaultTests<allocator_t>();

         // FIXME test free throwing on unknown pointers. same for realloc
       }
    }
};


CPPUNIT_TEST_SUITE_REGISTRATION(AllocatorTest);
