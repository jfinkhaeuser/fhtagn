/**
 * $Id$
 *
 * Copyright (C) 2009 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/

#include <vector>

#include <cppunit/extensions/HelperMacros.h>

#include <fhtagn/memory/allocator.h>
#include <fhtagn/memory/memory_pool.h>
#include <fhtagn/memory/pool_allocator.h>

FHTAGN_POOL_ALLOCATION_INITIALIZE;


class AllocatorTest
    : public CppUnit::TestFixture
{
public:
    CPPUNIT_TEST_SUITE(AllocatorTest);

      CPPUNIT_TEST(testMemoryPool);

      CPPUNIT_TEST(testDefaults);
      CPPUNIT_TEST(testBlockAllocator);

    CPPUNIT_TEST_SUITE_END();
private:

    template <
      typename poolT
    >
    void testMemoryPoolGeneric(poolT & pool)
    {
      // Technically, these tests do not always have to succeed - but they're
      // the most basic memory pool tests and *should* always succeed on properly
      // set up pools.

      char * p = static_cast<char *>(pool.alloc(42));
      CPPUNIT_ASSERT(p);

      p = static_cast<char *>(pool.realloc(p, 666));
      CPPUNIT_ASSERT(p);

      pool.free(p);
    }


    void testMemoryPool()
    {
      namespace mem = fhtagn::memory;

      {
        mem::heap_pool p;
        testMemoryPoolGeneric<mem::heap_pool>(p);
      }
    }



    template <
      typename allocatorT
    >
    void defaultTests()
    {
      std::vector<int, allocatorT> v;
      v.push_back(1);

      CPPUNIT_ASSERT(!v.empty());
      CPPUNIT_ASSERT_EQUAL(std::size_t(1), v.size());
      CPPUNIT_ASSERT_EQUAL(int(1), v[0]);
    }



    void testDefaults()
    {
      // T is int in these tests.
      defaultTests<fhtagn::memory::allocator<int> >();
    }



    void testBlockAllocator()
    {
       // T is int in these tests.
       namespace mem = fhtagn::memory;
       typedef mem::allocator<int, mem::pool_allocation_policy<int> > allocator_t;

       // Set global pool to be an instance of heap_pool. That'll be the simplest.
       CPPUNIT_ASSERT(allocator_t::set_global_memory_pool(
             allocator_t::memory_pool_ptr(new mem::heap_pool())));

       defaultTests<allocator_t>();
    }
};


CPPUNIT_TEST_SUITE_REGISTRATION(AllocatorTest);
